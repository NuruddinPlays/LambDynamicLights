/*
 * Copyright Â© 2024 LambdAurora <email@lambdaurora.dev>
 *
 * This file is part of LambDynamicLights.
 *
 * Licensed under the Lambda License. For more information,
 * see the LICENSE file.
 */

package dev.lambdaurora.lambdynlights.engine.lookup;

import dev.lambdaurora.lambdynlights.engine.DynamicLightingEngine;
import net.minecraft.core.BlockPos;
import org.jetbrains.annotations.NotNull;

/**
 * Represents an entry in a spatial lookup.
 *
 * @author LambdAurora, Akarys
 * @version 4.0.0
 * @since 3.1.0
 */
public interface SpatialLookupEntry {
	/**
	 * {@return the cell key of this entry}
	 */
	int cellKey();

	/**
	 * Returns the dynamic light level generated by this entry at the specified position.
	 *
	 * @param pos the position
	 * @return the computed dynamic light level at the specified position
	 */
	double getDynamicLightLevel(@NotNull BlockPos pos);

	static double lightAtPos(double x, double y, double z, @NotNull BlockPos pos, int luminance) {
		// Can't use Entity#squaredDistanceTo because of eye Y coordinate.
		double dx = pos.getX() - x + 0.5;
		double dy = pos.getY() - y + 0.5;
		double dz = pos.getZ() - z + 0.5;

		double distanceSquared = dx * dx + dy * dy + dz * dz;
		// 7.75 because else we would have to update more chunks and that's not a good idea.
		// 15 (max range for blocks) would be too much and a bit cheaty.
		if (distanceSquared <= DynamicLightingEngine.MAX_RADIUS_SQUARED) {
			double multiplier = 1.0 - Math.sqrt(distanceSquared) / DynamicLightingEngine.MAX_RADIUS;
			return multiplier * (double) luminance;
		}

		return 0.;
	}
}
